// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CreateEvent extends ethereum.Event {
  get params(): CreateEvent__Params {
    return new CreateEvent__Params(this);
  }
}

export class CreateEvent__Params {
  _event: CreateEvent;

  constructor(event: CreateEvent) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eventId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get description(): string {
    return this._event.parameters[3].value.toString();
  }

  get eventStorage(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class CreateTicketType extends ethereum.Event {
  get params(): CreateTicketType__Params {
    return new CreateTicketType__Params(this);
  }
}

export class CreateTicketType__Params {
  _event: CreateTicketType;

  constructor(event: CreateTicketType) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eventId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get ticketType(): CreateTicketTypeTicketTypeStruct {
    return changetype<CreateTicketTypeTicketTypeStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class CreateTicketTypeTicketTypeStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }

  get maxSupply(): BigInt {
    return this[2].toBigInt();
  }

  get currentSupply(): BigInt {
    return this[3].toBigInt();
  }

  get tokenURI(): string {
    return this[4].toString();
  }

  get souvenirTokenURI(): string {
    return this[5].toString();
  }
}

export class DeleteEvent extends ethereum.Event {
  get params(): DeleteEvent__Params {
    return new DeleteEvent__Params(this);
  }
}

export class DeleteEvent__Params {
  _event: DeleteEvent;

  constructor(event: DeleteEvent) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eventId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class DeleteTickeyType extends ethereum.Event {
  get params(): DeleteTickeyType__Params {
    return new DeleteTickeyType__Params(this);
  }
}

export class DeleteTickeyType__Params {
  _event: DeleteTickeyType;

  constructor(event: DeleteTickeyType) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eventId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get ticketTypeId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GenerateTicket extends ethereum.Event {
  get params(): GenerateTicket__Params {
    return new GenerateTicket__Params(this);
  }
}

export class GenerateTicket__Params {
  _event: GenerateTicket;

  constructor(event: GenerateTicket) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenURI(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferTicket extends ethereum.Event {
  get params(): TransferTicket__Params {
    return new TransferTicket__Params(this);
  }
}

export class TransferTicket__Params {
  _event: TransferTicket;

  constructor(event: TransferTicket) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TicketGenerator__getTicketResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get eventId(): Bytes {
    return this[1].toBytes();
  }

  get ticketTypeId(): Bytes {
    return this[2].toBytes();
  }

  get souvenirId(): BigInt {
    return this[3].toBigInt();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get souvenirMinted(): boolean {
    return this[5].toBoolean();
  }
}

export class TicketGenerator__getTicketTypeResultValue0Struct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }

  get maxSupply(): BigInt {
    return this[2].toBigInt();
  }

  get currentSupply(): BigInt {
    return this[3].toBigInt();
  }

  get tokenURI(): string {
    return this[4].toString();
  }

  get souvenirTokenURI(): string {
    return this[5].toString();
  }
}

export class TicketGenerator extends ethereum.SmartContract {
  static bind(address: Address): TicketGenerator {
    return new TicketGenerator("TicketGenerator", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EVENT_ORGANIZER(): Bytes {
    let result = super.call(
      "EVENT_ORGANIZER",
      "EVENT_ORGANIZER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_EVENT_ORGANIZER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EVENT_ORGANIZER",
      "EVENT_ORGANIZER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MINTER_ROLE(): Bytes {
    let result = super.call("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  OWNER_ROLE(): Bytes {
    let result = super.call("OWNER_ROLE", "OWNER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_OWNER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("OWNER_ROLE", "OWNER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyTicket(
    _eventId: Bytes,
    _ticketTypeId: Bytes,
    _recepient: Address,
    deadline: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): BigInt {
    let result = super.call(
      "buyTicket",
      "buyTicket(bytes32,bytes32,address,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_eventId),
        ethereum.Value.fromFixedBytes(_ticketTypeId),
        ethereum.Value.fromAddress(_recepient),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBigInt();
  }

  try_buyTicket(
    _eventId: Bytes,
    _ticketTypeId: Bytes,
    _recepient: Address,
    deadline: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyTicket",
      "buyTicket(bytes32,bytes32,address,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_eventId),
        ethereum.Value.fromFixedBytes(_ticketTypeId),
        ethereum.Value.fromAddress(_recepient),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEvent(_eventId: Bytes): Bytes {
    let result = super.call("getEvent", "getEvent(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(_eventId)
    ]);

    return result[0].toBytes();
  }

  try_getEvent(_eventId: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getEvent", "getEvent(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(_eventId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getMetadata(_tokenId: BigInt): string {
    let result = super.call("getMetadata", "getMetadata(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_getMetadata(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getMetadata", "getMetadata(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSouvenir(
    _eventId: Bytes,
    _ticketTypeId: Bytes,
    _ticketId: BigInt,
    _recepient: Address
  ): BigInt {
    let result = super.call(
      "getSouvenir",
      "getSouvenir(bytes32,bytes32,uint256,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_eventId),
        ethereum.Value.fromFixedBytes(_ticketTypeId),
        ethereum.Value.fromUnsignedBigInt(_ticketId),
        ethereum.Value.fromAddress(_recepient)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSouvenir(
    _eventId: Bytes,
    _ticketTypeId: Bytes,
    _ticketId: BigInt,
    _recepient: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSouvenir",
      "getSouvenir(bytes32,bytes32,uint256,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_eventId),
        ethereum.Value.fromFixedBytes(_ticketTypeId),
        ethereum.Value.fromUnsignedBigInt(_ticketId),
        ethereum.Value.fromAddress(_recepient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTicket(_ticketId: BigInt): TicketGenerator__getTicketResultValue0Struct {
    let result = super.call(
      "getTicket",
      "getTicket(uint256):((uint256,bytes32,bytes32,uint256,address,bool))",
      [ethereum.Value.fromUnsignedBigInt(_ticketId)]
    );

    return changetype<TicketGenerator__getTicketResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTicket(
    _ticketId: BigInt
  ): ethereum.CallResult<TicketGenerator__getTicketResultValue0Struct> {
    let result = super.tryCall(
      "getTicket",
      "getTicket(uint256):((uint256,bytes32,bytes32,uint256,address,bool))",
      [ethereum.Value.fromUnsignedBigInt(_ticketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TicketGenerator__getTicketResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getTicketType(
    _eventId: Bytes,
    _ticketTypeId: Bytes
  ): TicketGenerator__getTicketTypeResultValue0Struct {
    let result = super.call(
      "getTicketType",
      "getTicketType(bytes32,bytes32):((bytes32,uint256,uint256,uint256,string,string))",
      [
        ethereum.Value.fromFixedBytes(_eventId),
        ethereum.Value.fromFixedBytes(_ticketTypeId)
      ]
    );

    return changetype<TicketGenerator__getTicketTypeResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTicketType(
    _eventId: Bytes,
    _ticketTypeId: Bytes
  ): ethereum.CallResult<TicketGenerator__getTicketTypeResultValue0Struct> {
    let result = super.tryCall(
      "getTicketType",
      "getTicketType(bytes32,bytes32):((bytes32,uint256,uint256,uint256,string,string))",
      [
        ethereum.Value.fromFixedBytes(_eventId),
        ethereum.Value.fromFixedBytes(_ticketTypeId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TicketGenerator__getTicketTypeResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _souvenirGeneratorAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BuyTicketCall extends ethereum.Call {
  get inputs(): BuyTicketCall__Inputs {
    return new BuyTicketCall__Inputs(this);
  }

  get outputs(): BuyTicketCall__Outputs {
    return new BuyTicketCall__Outputs(this);
  }
}

export class BuyTicketCall__Inputs {
  _call: BuyTicketCall;

  constructor(call: BuyTicketCall) {
    this._call = call;
  }

  get _eventId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _ticketTypeId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _recepient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class BuyTicketCall__Outputs {
  _call: BuyTicketCall;

  constructor(call: BuyTicketCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateEventCall extends ethereum.Call {
  get inputs(): CreateEventCall__Inputs {
    return new CreateEventCall__Inputs(this);
  }

  get outputs(): CreateEventCall__Outputs {
    return new CreateEventCall__Outputs(this);
  }
}

export class CreateEventCall__Inputs {
  _call: CreateEventCall;

  constructor(call: CreateEventCall) {
    this._call = call;
  }

  get _eventId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get eventStorage(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CreateEventCall__Outputs {
  _call: CreateEventCall;

  constructor(call: CreateEventCall) {
    this._call = call;
  }
}

export class CreateTicketTypeCall extends ethereum.Call {
  get inputs(): CreateTicketTypeCall__Inputs {
    return new CreateTicketTypeCall__Inputs(this);
  }

  get outputs(): CreateTicketTypeCall__Outputs {
    return new CreateTicketTypeCall__Outputs(this);
  }
}

export class CreateTicketTypeCall__Inputs {
  _call: CreateTicketTypeCall;

  constructor(call: CreateTicketTypeCall) {
    this._call = call;
  }

  get _eventId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _ticketTypeId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _tokenURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _souvenirTokenURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _price(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _maxSupply(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreateTicketTypeCall__Outputs {
  _call: CreateTicketTypeCall;

  constructor(call: CreateTicketTypeCall) {
    this._call = call;
  }
}

export class DeleteEventCall extends ethereum.Call {
  get inputs(): DeleteEventCall__Inputs {
    return new DeleteEventCall__Inputs(this);
  }

  get outputs(): DeleteEventCall__Outputs {
    return new DeleteEventCall__Outputs(this);
  }
}

export class DeleteEventCall__Inputs {
  _call: DeleteEventCall;

  constructor(call: DeleteEventCall) {
    this._call = call;
  }

  get _eventId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class DeleteEventCall__Outputs {
  _call: DeleteEventCall;

  constructor(call: DeleteEventCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class GetSouvenirCall extends ethereum.Call {
  get inputs(): GetSouvenirCall__Inputs {
    return new GetSouvenirCall__Inputs(this);
  }

  get outputs(): GetSouvenirCall__Outputs {
    return new GetSouvenirCall__Outputs(this);
  }
}

export class GetSouvenirCall__Inputs {
  _call: GetSouvenirCall;

  constructor(call: GetSouvenirCall) {
    this._call = call;
  }

  get _eventId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _ticketTypeId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _ticketId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _recepient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class GetSouvenirCall__Outputs {
  _call: GetSouvenirCall;

  constructor(call: GetSouvenirCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class RemoveTicketTypeCall extends ethereum.Call {
  get inputs(): RemoveTicketTypeCall__Inputs {
    return new RemoveTicketTypeCall__Inputs(this);
  }

  get outputs(): RemoveTicketTypeCall__Outputs {
    return new RemoveTicketTypeCall__Outputs(this);
  }
}

export class RemoveTicketTypeCall__Inputs {
  _call: RemoveTicketTypeCall;

  constructor(call: RemoveTicketTypeCall) {
    this._call = call;
  }

  get _eventId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _ticketTypeId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RemoveTicketTypeCall__Outputs {
  _call: RemoveTicketTypeCall;

  constructor(call: RemoveTicketTypeCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferTicketCall extends ethereum.Call {
  get inputs(): TransferTicketCall__Inputs {
    return new TransferTicketCall__Inputs(this);
  }

  get outputs(): TransferTicketCall__Outputs {
    return new TransferTicketCall__Outputs(this);
  }
}

export class TransferTicketCall__Inputs {
  _call: TransferTicketCall;

  constructor(call: TransferTicketCall) {
    this._call = call;
  }

  get _recepient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferTicketCall__Outputs {
  _call: TransferTicketCall;

  constructor(call: TransferTicketCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
